# Generated from libraries/antlr/LALGLexer.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,47,309,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,
        1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,
        1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,
        1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,
        1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,
        1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,18,1,18,
        1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,
        1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,27,1,27,
        1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,32,1,32,1,33,
        1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,3,39,
        246,8,39,1,40,1,40,1,41,1,41,1,41,5,41,253,8,41,10,41,12,41,256,
        9,41,1,42,4,42,259,8,42,11,42,12,42,260,1,43,4,43,264,8,43,11,43,
        12,43,265,1,43,1,43,4,43,270,8,43,11,43,12,43,271,1,44,1,44,1,44,
        1,44,5,44,278,8,44,10,44,12,44,281,9,44,1,44,1,44,1,45,1,45,5,45,
        287,8,45,10,45,12,45,290,9,45,1,45,1,45,1,45,1,45,1,46,4,46,297,
        8,46,11,46,12,46,298,1,46,1,46,1,47,4,47,304,8,47,11,47,12,47,305,
        1,48,1,48,2,288,305,0,49,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,
        19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,
        41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,
        63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,0,81,0,83,40,
        85,41,87,42,89,43,91,44,93,45,95,46,97,47,1,0,4,3,0,65,90,95,95,
        97,122,1,0,48,57,2,0,10,10,13,13,3,0,9,10,12,13,32,32,315,0,1,1,
        0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
        0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,
        0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,
        0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,
        0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,
        0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,
        0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,
        0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,
        0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,
        0,0,97,1,0,0,0,1,99,1,0,0,0,3,107,1,0,0,0,5,117,1,0,0,0,7,121,1,
        0,0,0,9,125,1,0,0,0,11,133,1,0,0,0,13,139,1,0,0,0,15,143,1,0,0,0,
        17,146,1,0,0,0,19,151,1,0,0,0,21,156,1,0,0,0,23,162,1,0,0,0,25,165,
        1,0,0,0,27,170,1,0,0,0,29,176,1,0,0,0,31,181,1,0,0,0,33,187,1,0,
        0,0,35,190,1,0,0,0,37,192,1,0,0,0,39,194,1,0,0,0,41,196,1,0,0,0,
        43,198,1,0,0,0,45,202,1,0,0,0,47,205,1,0,0,0,49,209,1,0,0,0,51,213,
        1,0,0,0,53,215,1,0,0,0,55,218,1,0,0,0,57,220,1,0,0,0,59,222,1,0,
        0,0,61,225,1,0,0,0,63,228,1,0,0,0,65,230,1,0,0,0,67,232,1,0,0,0,
        69,234,1,0,0,0,71,236,1,0,0,0,73,238,1,0,0,0,75,240,1,0,0,0,77,242,
        1,0,0,0,79,245,1,0,0,0,81,247,1,0,0,0,83,249,1,0,0,0,85,258,1,0,
        0,0,87,263,1,0,0,0,89,273,1,0,0,0,91,284,1,0,0,0,93,296,1,0,0,0,
        95,303,1,0,0,0,97,307,1,0,0,0,99,100,5,112,0,0,100,101,5,114,0,0,
        101,102,5,111,0,0,102,103,5,103,0,0,103,104,5,114,0,0,104,105,5,
        97,0,0,105,106,5,109,0,0,106,2,1,0,0,0,107,108,5,112,0,0,108,109,
        5,114,0,0,109,110,5,111,0,0,110,111,5,99,0,0,111,112,5,101,0,0,112,
        113,5,100,0,0,113,114,5,117,0,0,114,115,5,114,0,0,115,116,5,101,
        0,0,116,4,1,0,0,0,117,118,5,118,0,0,118,119,5,97,0,0,119,120,5,114,
        0,0,120,6,1,0,0,0,121,122,5,105,0,0,122,123,5,110,0,0,123,124,5,
        116,0,0,124,8,1,0,0,0,125,126,5,98,0,0,126,127,5,111,0,0,127,128,
        5,111,0,0,128,129,5,108,0,0,129,130,5,101,0,0,130,131,5,97,0,0,131,
        132,5,110,0,0,132,10,1,0,0,0,133,134,5,98,0,0,134,135,5,101,0,0,
        135,136,5,103,0,0,136,137,5,105,0,0,137,138,5,110,0,0,138,12,1,0,
        0,0,139,140,5,101,0,0,140,141,5,110,0,0,141,142,5,100,0,0,142,14,
        1,0,0,0,143,144,5,105,0,0,144,145,5,102,0,0,145,16,1,0,0,0,146,147,
        5,116,0,0,147,148,5,104,0,0,148,149,5,101,0,0,149,150,5,110,0,0,
        150,18,1,0,0,0,151,152,5,101,0,0,152,153,5,108,0,0,153,154,5,115,
        0,0,154,155,5,101,0,0,155,20,1,0,0,0,156,157,5,119,0,0,157,158,5,
        104,0,0,158,159,5,105,0,0,159,160,5,108,0,0,160,161,5,101,0,0,161,
        22,1,0,0,0,162,163,5,100,0,0,163,164,5,111,0,0,164,24,1,0,0,0,165,
        166,5,114,0,0,166,167,5,101,0,0,167,168,5,97,0,0,168,169,5,100,0,
        0,169,26,1,0,0,0,170,171,5,119,0,0,171,172,5,114,0,0,172,173,5,105,
        0,0,173,174,5,116,0,0,174,175,5,101,0,0,175,28,1,0,0,0,176,177,5,
        116,0,0,177,178,5,114,0,0,178,179,5,117,0,0,179,180,5,101,0,0,180,
        30,1,0,0,0,181,182,5,102,0,0,182,183,5,97,0,0,183,184,5,108,0,0,
        184,185,5,115,0,0,185,186,5,101,0,0,186,32,1,0,0,0,187,188,5,58,
        0,0,188,189,5,61,0,0,189,34,1,0,0,0,190,191,5,43,0,0,191,36,1,0,
        0,0,192,193,5,45,0,0,193,38,1,0,0,0,194,195,5,42,0,0,195,40,1,0,
        0,0,196,197,5,47,0,0,197,42,1,0,0,0,198,199,5,100,0,0,199,200,5,
        105,0,0,200,201,5,118,0,0,201,44,1,0,0,0,202,203,5,111,0,0,203,204,
        5,114,0,0,204,46,1,0,0,0,205,206,5,97,0,0,206,207,5,110,0,0,207,
        208,5,100,0,0,208,48,1,0,0,0,209,210,5,110,0,0,210,211,5,111,0,0,
        211,212,5,116,0,0,212,50,1,0,0,0,213,214,5,61,0,0,214,52,1,0,0,0,
        215,216,5,60,0,0,216,217,5,62,0,0,217,54,1,0,0,0,218,219,5,60,0,
        0,219,56,1,0,0,0,220,221,5,62,0,0,221,58,1,0,0,0,222,223,5,60,0,
        0,223,224,5,61,0,0,224,60,1,0,0,0,225,226,5,62,0,0,226,227,5,61,
        0,0,227,62,1,0,0,0,228,229,5,59,0,0,229,64,1,0,0,0,230,231,5,58,
        0,0,231,66,1,0,0,0,232,233,5,44,0,0,233,68,1,0,0,0,234,235,5,46,
        0,0,235,70,1,0,0,0,236,237,5,40,0,0,237,72,1,0,0,0,238,239,5,41,
        0,0,239,74,1,0,0,0,240,241,5,91,0,0,241,76,1,0,0,0,242,243,5,93,
        0,0,243,78,1,0,0,0,244,246,7,0,0,0,245,244,1,0,0,0,246,80,1,0,0,
        0,247,248,7,1,0,0,248,82,1,0,0,0,249,254,3,79,39,0,250,253,3,79,
        39,0,251,253,3,81,40,0,252,250,1,0,0,0,252,251,1,0,0,0,253,256,1,
        0,0,0,254,252,1,0,0,0,254,255,1,0,0,0,255,84,1,0,0,0,256,254,1,0,
        0,0,257,259,3,81,40,0,258,257,1,0,0,0,259,260,1,0,0,0,260,258,1,
        0,0,0,260,261,1,0,0,0,261,86,1,0,0,0,262,264,3,81,40,0,263,262,1,
        0,0,0,264,265,1,0,0,0,265,263,1,0,0,0,265,266,1,0,0,0,266,267,1,
        0,0,0,267,269,5,46,0,0,268,270,3,81,40,0,269,268,1,0,0,0,270,271,
        1,0,0,0,271,269,1,0,0,0,271,272,1,0,0,0,272,88,1,0,0,0,273,274,5,
        47,0,0,274,275,5,47,0,0,275,279,1,0,0,0,276,278,8,2,0,0,277,276,
        1,0,0,0,278,281,1,0,0,0,279,277,1,0,0,0,279,280,1,0,0,0,280,282,
        1,0,0,0,281,279,1,0,0,0,282,283,6,44,0,0,283,90,1,0,0,0,284,288,
        5,123,0,0,285,287,9,0,0,0,286,285,1,0,0,0,287,290,1,0,0,0,288,289,
        1,0,0,0,288,286,1,0,0,0,289,291,1,0,0,0,290,288,1,0,0,0,291,292,
        5,125,0,0,292,293,1,0,0,0,293,294,6,45,0,0,294,92,1,0,0,0,295,297,
        7,3,0,0,296,295,1,0,0,0,297,298,1,0,0,0,298,296,1,0,0,0,298,299,
        1,0,0,0,299,300,1,0,0,0,300,301,6,46,0,0,301,94,1,0,0,0,302,304,
        3,97,48,0,303,302,1,0,0,0,304,305,1,0,0,0,305,306,1,0,0,0,305,303,
        1,0,0,0,306,96,1,0,0,0,307,308,9,0,0,0,308,98,1,0,0,0,11,0,245,252,
        254,260,265,271,279,288,298,305,1,6,0,0
    ]

class LALGLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    PROGRAM = 1
    PROCEDURE = 2
    VAR = 3
    TYPE_INT = 4
    TYPE_BOOL = 5
    BEGIN = 6
    END = 7
    IF = 8
    THEN = 9
    ELSE = 10
    WHILE = 11
    DO = 12
    PROC_READ = 13
    PROC_WRITE = 14
    CONST_TRUE = 15
    CONST_FALSE = 16
    ASSIGNMENT = 17
    SUM = 18
    SUB = 19
    MUL = 20
    DIV = 21
    INT_DIV = 22
    OR = 23
    AND = 24
    NOT = 25
    EQ = 26
    NE = 27
    LT = 28
    GT = 29
    LTE = 30
    GTE = 31
    SEMICOLON = 32
    COLON = 33
    COMMA = 34
    DOT = 35
    LP = 36
    RP = 37
    LB = 38
    RB = 39
    IDENTIFIER = 40
    INT = 41
    REAL = 42
    COMMENT = 43
    MULTILINE_COMMENT = 44
    WS = 45
    INVALID_TOKEN = 46
    INVALID = 47

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'program'", "'procedure'", "'var'", "'int'", "'boolean'", "'begin'", 
            "'end'", "'if'", "'then'", "'else'", "'while'", "'do'", "'read'", 
            "'write'", "'true'", "'false'", "':='", "'+'", "'-'", "'*'", 
            "'/'", "'div'", "'or'", "'and'", "'not'", "'='", "'<>'", "'<'", 
            "'>'", "'<='", "'>='", "';'", "':'", "','", "'.'", "'('", "')'", 
            "'['", "']'" ]

    symbolicNames = [ "<INVALID>",
            "PROGRAM", "PROCEDURE", "VAR", "TYPE_INT", "TYPE_BOOL", "BEGIN", 
            "END", "IF", "THEN", "ELSE", "WHILE", "DO", "PROC_READ", "PROC_WRITE", 
            "CONST_TRUE", "CONST_FALSE", "ASSIGNMENT", "SUM", "SUB", "MUL", 
            "DIV", "INT_DIV", "OR", "AND", "NOT", "EQ", "NE", "LT", "GT", 
            "LTE", "GTE", "SEMICOLON", "COLON", "COMMA", "DOT", "LP", "RP", 
            "LB", "RB", "IDENTIFIER", "INT", "REAL", "COMMENT", "MULTILINE_COMMENT", 
            "WS", "INVALID_TOKEN", "INVALID" ]

    ruleNames = [ "PROGRAM", "PROCEDURE", "VAR", "TYPE_INT", "TYPE_BOOL", 
                  "BEGIN", "END", "IF", "THEN", "ELSE", "WHILE", "DO", "PROC_READ", 
                  "PROC_WRITE", "CONST_TRUE", "CONST_FALSE", "ASSIGNMENT", 
                  "SUM", "SUB", "MUL", "DIV", "INT_DIV", "OR", "AND", "NOT", 
                  "EQ", "NE", "LT", "GT", "LTE", "GTE", "SEMICOLON", "COLON", 
                  "COMMA", "DOT", "LP", "RP", "LB", "RB", "LETTER", "DIGIT", 
                  "IDENTIFIER", "INT", "REAL", "COMMENT", "MULTILINE_COMMENT", 
                  "WS", "INVALID_TOKEN", "INVALID" ]

    grammarFileName = "LALGLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


